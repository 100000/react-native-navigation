(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{167:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return c})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return p}));var a=t(1),i=t(6),r=(t(0),t(193)),o={id:"installingAndroid",title:"Manual Installation",sidebar_label:"Manual Installation"},c={id:"installingAndroid",title:"Manual Installation",description:"## 1. Update settings.gradle",source:"@site/docs/installingAndroid.mdx",permalink:"/docs/installingAndroid",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/installingAndroid.mdx",sidebar_label:"Manual Installation"},l=[{value:"1. Update settings.gradle",id:"1-update-settingsgradle",children:[]},{value:"2. Upgrade gradle version",id:"2-upgrade-gradle-version",children:[]},{value:"3. Update android/build.gradle",id:"3-update-androidbuildgradle",children:[]},{value:"4. Update project dependencies in android/app/build.gradle",id:"4-update-project-dependencies-in-androidappbuildgradle",children:[]},{value:"5. RNN and React Native version",id:"5-rnn-and-react-native-version",children:[]},{value:"6. Build app with gradle command",id:"6-build-app-with-gradle-command",children:[{value:"Ignore other RNN flavors",id:"ignore-other-rnn-flavors",children:[]}]},{value:"7. Update MainActivity.java",id:"7-update-mainactivityjava",children:[]},{value:"8. Update MainApplication.java",id:"8-update-mainapplicationjava",children:[]},{value:"9. Force the same support library version across all dependencies (optional)",id:"9-force-the-same-support-library-version-across-all-dependencies-optional",children:[]}],d={rightToc:l};function p(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},d,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"1-update-settingsgradle"},"1. Update settings.gradle"),Object(r.b)("p",null,"Add the following to ",Object(r.b)("inlineCode",{parentName:"p"},"android/settings.gradle"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-groovy"}),"include ':react-native-navigation'\nproject(':react-native-navigation').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-navigation/lib/android/app/')\n")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"These settings declare a new project called ",Object(r.b)("inlineCode",{parentName:"p"},":react-native-navigation")," and direct the build system to its location in node modules. If you'd like to use a local clone of RNN, you can simply change the path above to the path of your local clone.")),Object(r.b)("h2",{id:"2-upgrade-gradle-version"},"2. Upgrade gradle version"),Object(r.b)("p",null,"Make sure you're using the new gradle plugin, edit ",Object(r.b)("inlineCode",{parentName:"p"},"android/gradle/wrapper/gradle-wrapper.properties")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"You can use version 4.4 or higher")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-diff"}),"distributionBase=GRADLE_USER_HOME\ndistributionPath=wrapper/dists\nzipStoreBase=GRADLE_USER_HOME\nzipStorePath=wrapper/dists\n+distributionUrl=https\\://services.gradle.org/distributions/gradle-4.4-all.zip\n-distributionUrl=https\\://services.gradle.org/distributions/gradle-2.14.1-all.zip\n")),Object(r.b)("h2",{id:"3-update-androidbuildgradle"},"3. Update android/build.gradle"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-diff"}),"buildscript {\n    repositories {\n+        google()\n+        mavenLocal()\n+        mavenCentral()\n+        jcenter()\n-        maven {\n-            url 'https://maven.google.com/'\n-            name 'Google'\n-        }\n    }\n    dependencies {\n+        classpath 'com.android.tools.build:gradle:3.2.1'\n-        classpath 'com.android.tools.build:gradle:2.2.3'\n    }\n}\n\nallprojects {\n    repositories {\n+       google()\n        mavenLocal()\n        jcenter()\n        maven {\n            // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm\n            url \"$rootDir/../node_modules/react-native/android\"\n        }\n-        maven {\n-            url 'https://maven.google.com/'\n-            name 'Google'\n-        }\n+       maven { url 'https://jitpack.io' }\n    }\n}\n\next {\n-    minSdkVersion = 16\n+    minSdkVersion = 19\n    compileSdkVersion = 26\n    targetSdkVersion = 26\n    supportLibVersion = \"26.1.0\"\n}\n")),Object(r.b)("h2",{id:"4-update-project-dependencies-in-androidappbuildgradle"},"4. Update project dependencies in android/app/build.gradle"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-diff"}),'android {\n    compileSdkVersion rootProject.ext.compileSdkVersion\n    buildToolsVersion rootProject.ext.buildToolsVersion\n\n    defaultConfig {\n        applicationId "com.yourproject"\n        minSdkVersion rootProject.ext.minSdkVersion\n        targetSdkVersion rootProject.ext.targetSdkVersion\n        versionCode 1\n        versionName "1.0"\n        ndk {\n            abiFilters "armeabi-v7a", "x86"\n        }\n    }\n+   compileOptions {\n+       sourceCompatibility JavaVersion.VERSION_1_8\n+       targetCompatibility JavaVersion.VERSION_1_8\n+   }\n    ...\n}\n\ndependencies {\n-    compile fileTree(dir: "libs", include: ["*.jar"])\n-    compile "com.facebook.react:react-native:+"  // From node_modules\n+    implementation fileTree(dir: "libs", include: ["*.jar"])\n+    implementation "com.facebook.react:react-native:+"  // From node_modules\n+    implementation project(\':react-native-navigation\')\n}\n')),Object(r.b)("h2",{id:"5-rnn-and-react-native-version"},"5. RNN and React Native version"),Object(r.b)("p",null,"react-native-navigation supports multiple React Native versions. Target the React Native version required by your project by specifying the RNN build flavor in ",Object(r.b)("inlineCode",{parentName:"p"},"android/app/build.gradle"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-diff"}),'android {\n    ...\n    defaultConfig {\n        applicationId "com.yourproject"\n        minSdkVersion rootProject.ext.minSdkVersion\n        targetSdkVersion rootProject.ext.targetSdkVersion\n+        missingDimensionStrategy "RNN.reactNativeVersion", "reactNative57" // See note below!\n        versionCode 1\n        versionName "1.0"\n        ...\n    }\n    ...\n}\n')),Object(r.b)("p",null,"!>Important note about ",Object(r.b)("inlineCode",{parentName:"p"},"missingDimensionStrategy")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},Object(r.b)("inlineCode",{parentName:"p"},"reactNative51")," - RN 0.54.x and below<\n",Object(r.b)("inlineCode",{parentName:"p"},"reactNative55")," - RN 0.55.x\n",Object(r.b)("inlineCode",{parentName:"p"},"reactNative56")," - RN 0.56.x\n",Object(r.b)("inlineCode",{parentName:"p"},"reactNative57")," - RN 0.57.0 - 0.57.4\n",Object(r.b)("inlineCode",{parentName:"p"},"reactNative57_5")," - RN 0.57.5 - 0.59.9\n",Object(r.b)("inlineCode",{parentName:"p"},"reactNative60")," - RN 0.60.0 and above")),Object(r.b)("p",null,"Now we need to instruct gradle how to build that flavor. To do so here two solutions:"),Object(r.b)("h2",{id:"6-build-app-with-gradle-command"},"6. Build app with gradle command"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"prefered solution")," The RNN flavor you would like to build is specified in ",Object(r.b)("inlineCode",{parentName:"p"},"app/build.gradle"),". Therefore in order to compile only that flavor, instead of building your entire project using ",Object(r.b)("inlineCode",{parentName:"p"},"./gradlew assembleDebug"),", you should instruct gradle to build the app module: ",Object(r.b)("inlineCode",{parentName:"p"},"./gradlew app:assembleDebug"),". The easiest way is to add a package.json command to build and install your debug Android APK ."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),'"scripts": {\n  ...\n  "android": "cd ./android && ./gradlew app:assembleDebug && ./gradlew installDebug"\n}\n')),Object(r.b)("p",null,"Now run ",Object(r.b)("inlineCode",{parentName:"p"},"npm run android")," to build your application"),Object(r.b)("h3",{id:"ignore-other-rnn-flavors"},"Ignore other RNN flavors"),Object(r.b)("p",null,"If you don't want to run ",Object(r.b)("inlineCode",{parentName:"p"},"npm run android")," and want to keep the default ",Object(r.b)("inlineCode",{parentName:"p"},"react-native run-android")," command, you need to specify to graddle to ignore the other flavors RNN provides."),Object(r.b)("p",null,"To do so edit ",Object(r.b)("inlineCode",{parentName:"p"},"android/build.gradle")," and add:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-diff"}),"+subprojects { subproject ->\n+    afterEvaluate {\n+        if ((subproject.plugins.hasPlugin('android') || subproject.plugins.hasPlugin('android-library'))) {\n+            android {\n+                variantFilter { variant ->\n+                    def names = variant.flavors*.name\n+                    if (names.contains(\"reactNative51\") || names.contains(\"reactNative55\")) {\n+                        setIgnore(true)\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Note"),": As more build variants come available in the future, you will need to adjust the list (",Object(r.b)("inlineCode",{parentName:"p"},'names.contains("reactNative51") || names.contains("reactNative55")'),"). This is why we recommend the first solution."),Object(r.b)("h2",{id:"7-update-mainactivityjava"},"7. Update MainActivity.java"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"MainActivity.java")," should extend ",Object(r.b)("inlineCode",{parentName:"p"},"com.reactnativenavigation.NavigationActivity")," instead of ",Object(r.b)("inlineCode",{parentName:"p"},"ReactActivity"),"."),Object(r.b)("p",null,"This file is located in ",Object(r.b)("inlineCode",{parentName:"p"},"android/app/src/main/java/com/<yourproject>/MainActivity.java"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-diff"}),'-import com.facebook.react.ReactActivity;\n+import com.reactnativenavigation.NavigationActivity;\n\n-public class MainActivity extends ReactActivity {\n+public class MainActivity extends NavigationActivity {\n-    @Override\n-    protected String getMainComponentName() {\n-        return "yourproject";\n-    }\n}\n')),Object(r.b)("p",null,"If you have any ",Object(r.b)("strong",{parentName:"p"},"react-native")," related methods, you can safely delete them."),Object(r.b)("h2",{id:"8-update-mainapplicationjava"},"8. Update MainApplication.java"),Object(r.b)("p",null,"This file is located in ",Object(r.b)("inlineCode",{parentName:"p"},"android/app/src/main/java/com/<yourproject>/MainApplication.java"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-diff"}),'...\nimport android.app.Application;\n\nimport com.facebook.react.ReactApplication;\nimport com.facebook.react.ReactNativeHost;\nimport com.facebook.react.ReactPackage;\nimport com.facebook.react.shell.MainReactPackage;\nimport com.facebook.soloader.SoLoader;\n\n+import com.reactnativenavigation.NavigationApplication;\n+import com.reactnativenavigation.react.NavigationReactNativeHost;\n+import com.reactnativenavigation.react.ReactGateway;\n\nimport java.util.Arrays;\nimport java.util.List;\n\n-public class MainApplication extends Application implements ReactApplication {\n+public class MainApplication extends NavigationApplication {\n+\n+    @Override\n+    protected ReactGateway createReactGateway() {\n+        ReactNativeHost host = new NavigationReactNativeHost(this, isDebug(), createAdditionalReactPackages()) {\n+            @Override\n+            protected String getJSMainModuleName() {\n+                return "index";\n+            }\n+        };\n+        return new ReactGateway(this, isDebug(), host);\n+    }\n+\n+    @Override\n+    public boolean isDebug() {\n+        return BuildConfig.DEBUG;\n+    }\n+\n+    protected List<ReactPackage> getPackages() {\n+        // Add additional packages you require here\n+        // No need to add RnnPackage and MainReactPackage\n+        return Arrays.<ReactPackage>asList(\n+            // eg. new VectorIconsPackage()\n+        );\n+    }\n+\n+    @Override\n+    public List<ReactPackage> createAdditionalReactPackages() {\n+        return getPackages();\n+    }\n- ...\n+}\n\n')),Object(r.b)("h2",{id:"9-force-the-same-support-library-version-across-all-dependencies-optional"},"9. Force the same support library version across all dependencies (optional)"),Object(r.b)("p",null,"Some of your dependencies might require a different version of one of Google's support library packages. This results in compilation errors similar to this:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"FAILURE: Build failed with an exception.\n\n* What went wrong:\nExecution failed for task ':app:preDebugBuild'.\n> Android dependency 'com.android.support:design' has different version for the compile (25.4.0) and runtime (26.1.0) classpath. You should manually set the same version via DependencyResolution\n")),Object(r.b)("p",null,"To resolve these conflicts, add the following to your ",Object(r.b)("inlineCode",{parentName:"p"},"app/build.gradle"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-groovy"}),"android {\n    ...\n}\n\nconfigurations.all {\n    resolutionStrategy.eachDependency { DependencyResolveDetails details ->\n        def requested = details.requested\n        if (requested.group == 'com.android.support' && requested.name != 'multidex') {\n            details.useVersion \"${rootProject.ext.supportLibVersion}\"\n        }\n    }\n}\n\ndependencies {\n    ...\n    implementation 'com.android.support:design:25.4.0'\n    implementation \"com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}\"\n}\n\n")))}p.isMDXComponent=!0},193:function(e,n,t){"use strict";t.d(n,"a",(function(){return s})),t.d(n,"b",(function(){return m}));var a=t(0),i=t.n(a);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var d=i.a.createContext({}),p=function(e){var n=i.a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):c({},n,{},e)),t},s=function(e){var n=p(e.components);return i.a.createElement(d.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},u=Object(a.forwardRef)((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),s=p(t),u=a,m=s["".concat(o,".").concat(u)]||s[u]||b[u]||r;return t?i.a.createElement(m,c({ref:n},d,{components:t})):i.a.createElement(m,c({ref:n},d))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=u;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var d=2;d<r;d++)o[d]=t[d];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);